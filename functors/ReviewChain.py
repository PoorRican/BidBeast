from typing import ClassVar

from langchain.chat_models import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.schema.runnable import RunnableParallel

from models import FeedbackModel

_preamble = """
You are an assistant to a freelance contractor and have the ability to understand the nuances involved with finding the
right contract based on the freelancers skills. Your job is to process the output generated by an automated system. This
automated system evaluates contracts and determines if the freelancer will like or dislike a contract. Sometimes this
system makes statements that are not true, or misunderstands the abilities of the freelancer, so your job is to correct
the comments based on freelancers comments.
"""

_pros_prompt = PromptTemplate.from_template(
    """{{preamble}}
    
You will be given comments by the freelancer. Your job is to modify the `pros` attribute of the following object.
The "pros" is an array containing reasons as to why the freelancer might like this job. Include skills possessed by
the freelancer, terms of the contract that the freelancer likes, and other positive aspects about the contract. The
`pros` attribute does not include any lack of knowledge, skill or experience.

The attribute you're to manipulate is the `pros` attribute:
```{{feedback}}```

Here is the comment by the freelancer:
```{{comments}}```

Not every clause in the comments apply; some of the comments might not apply to `pros`.
If there is nothing positive or if there are no pros in the comments, return an empty python array.

A job being too ambiguous is not positive. Do not assume that the freelancer has the necessary skills or knowledge.

Return the python value for the `pros` array and nothing more.""",
    template_format='jinja2',
    partial_variables={'preamble': _preamble}
)

_cons_prompt = PromptTemplate.from_template(
    """{{preamble}}

You will be given comments by the freelancer, and your job is to modify the given Python list with the "cons" of
this potential contract. These "cons" should be reasons as to why the freelancer might not like this job. These
reasons might be a lack of skills or knowledge, the terms of the contract, any particularities of the type of client
or job description that the freelancer does not like.

Do not include any knowledge, skill or experience that the freelancer has. However, if the freelancer mentions that
they have a skill, knowledge, or experience, it might override some of the reasons.

If there is nothing negative in the comment, return an empty python array.

The attribute you're to manipulate is the `cons` attribute:
```{{feedback}}```

Here is the comments by the freelancer:
```{{comments}}```

Not every clause in the comments apply; some of the comments might not apply to `cons`. 

Return the python value for the `cons` array and nothing more.""",
    template_format='jinja2',
    partial_variables={'preamble': _preamble}
)

_viability_prompt = PromptTemplate.from_template(
    """{{preamble}}

You will be evaluating if the freelancer would want to bid this contract or not. If the freelancer does not suggest
that this value should be changed, then it is to be remain the same. This value should be changed based on the text
provided by the freelancer. A value of `1` means that the freelancer likes this contract overall and they would like
to bid on this specific contract. A value of `0` means that the freelancer does not like this job and they would not
like to bid this specific contract. A value of `-1` is the default and should only be determined if the freelancer
does not specifically mention if it should be changed or not.

The value you're to manipulate is the `viability` attribute of the following object:
```{{feedback}}```

This is are the freelancer's comments:
```{{comments}}```

Return the python value `-1`, `0`, or `1` based on the freelancer's comments and nothing more.""",
    template_format='jinja2',
    partial_variables={'preamble': _preamble}
)


class ReviewChain:
    """ This functor edits a `FeedbackModel` based on user-provided comments.

    The intent is for the user to edit the `FeedbackModel` via a simple message.
    """
    _llm: ClassVar[ChatOpenAI] = ChatOpenAI(temperature=0.2, model_name='gpt-3.5-turbo-16k')
    _chain: ClassVar[RunnableParallel] = RunnableParallel(
        pros=_pros_prompt | _llm,
        cons=_cons_prompt | _llm,
        viability=_viability_prompt | _llm
    )

    @classmethod
    def __call__(cls, feedback: FeedbackModel, comments: str) -> FeedbackModel:
        if comments == 'skip':
            return feedback

        results = cls._chain.invoke({'feedback': feedback, 'comments': comments})

        cons = eval(results['cons'].content)
        pros = eval(results['pros'].content)
        viability = eval(results['viability'].content)

        return FeedbackModel(
            pros=pros,
            cons=cons,
            viability=viability
        )
